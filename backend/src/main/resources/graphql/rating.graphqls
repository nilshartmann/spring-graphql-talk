# https://github.com/graphql-java/graphql-java/releases/tag/v9.0

# A User in our system that is allowed to leave Ratings
type User {
  id: ID!
  login: String!
  name: String!
}

# A Rating that has been written by an Author for a Beer
type Rating {
  # An immutable unique Id
  id: ID!

  # The  beer, this Rating is written for
  beer: Beer!

  # Who has written this Rating?
  author: User!

  # A comment for this beer
  comment: String!

  stars: Int!
}

# Representation of a Beer that has been rated
type Beer {
  # Unique, immutable Id, that identifies this Beer
  id: ID!

  # The name of the beer
  name: String!

  # The Beer's price
  price: String!

  # List of all Ratings for this Beer
  ratings: [Rating!]!

  # Average Rating of this Beer
  averageStars: Int!

  # List of Ratings that has at exactly 'stars' Stars
  ratingsWithStars(stars: Int!): [Rating!]!
}

# Can be added to 'user' fields to enable
# the DataLoader/Caching for user requests
# (For testing/demo purposes only, would normally be enabled ALWAYS)
directive @useDataLoader on FIELD | FRAGMENT_DEFINITION | FRAGMENT_SPREAD | INLINE_FRAGMENT | QUERY

# Can be added to 'beers' and 'shops' fields to simulate very slow request processing
# (For testing/demo purposes only)
directive @slowDown on FIELD | FRAGMENT_DEFINITION | FRAGMENT_SPREAD | INLINE_FRAGMENT | QUERY

# Can be added to 'beers' and 'shops' fields to simulate run as async fetchers
# (For testing/demo purposes only)
directive @async on FIELD | FRAGMENT_DEFINITION | FRAGMENT_SPREAD | INLINE_FRAGMENT | QUERY


type Query {
  # Returns a specific beer, identified by its id
  beer(beerId: ID!): Beer

  # Returns all beers in our system
  beers: [Beer!]!

  ping(msg: String): String!
}

input AddRatingInput {
  beerId: ID!
  userId: ID!
  comment: String!
  stars: Int!
}

type Mutation {
  # Add a new Rating to a Beer and returns the new Rating
  addRating(ratingInput: AddRatingInput): Rating!

  # Change the name of this beer. Note: this is only allowed for admins
  # (currently user 'U5' / 'nils')
  updateBeerName(beerId: ID!, newName: String!): Beer!
}

type Subscription {
  onNewRating: Rating!
  newRatings(beerId: ID!): Rating!
}
